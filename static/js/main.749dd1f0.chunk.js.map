{"version":3,"sources":["components/Card/index.js","components/Card/actions.js","components/Interactions/index.js","components/App/index.js","components/Card/reduxReducer.js","components/Interactions/reduxReducer.js","rootReducer.js","index.js"],"names":["allSpinnerNames","Object","keys","Spinners","filter","name","includes","Card","bgColor","dispatchRedux","useDispatch","React","useState","shortid","generate","id","randomIndex","Math","floor","random","length","content","useSelector","appState","card","contentById","spinnerName","Spinner","useRef","className","classnames","onClick","type","payload","dispatch","a","fetchUrl","fetch","response","json","incomingData","data","result","url","images","fixed_width","fetchAndSetCard","style","maxWidth","minHeight","current","color","src","Interactions","numInteractions","interactions","percentage","parseInt","colors","height","role","width","aria-valuenow","aria-valuemin","aria-valuemax","randomColor","App","map","index","initialState","selectedId","lastIdsSelected","appReducers","combineReducers","prevState","unshift","pop","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.749dd1f0.chunk.js","sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport shortid from \"shortid\";\nimport * as Spinners from \"react-spinners\";\nimport { fetchAndSetCard } from \"./actions\";\n\nconst allSpinnerNames = Object.keys(Spinners).filter(\n  (name) => [\"BeatLoader\", \"PacmanLoader\", \"ClockLoader\", \"GridLoader\", \"ScaleLoader\", \"ScaleLoader\", \"SquareLoader\"].includes(name)\n);\n\nfunction Card({ bgColor }) {\n  const dispatchRedux = useDispatch();\n  const [id] = React.useState(shortid.generate());\n\n  const randomIndex = Math.floor(Math.random() * allSpinnerNames.length);\n  const content = useSelector((appState) => appState.card.contentById[id]);\n  const [spinnerName] = React.useState(allSpinnerNames[randomIndex]);\n\n  const Spinner = React.useRef(Spinners[spinnerName]);\n\n  const onClickHandler = () => {\n    dispatchRedux({ type: \"CARD_SELECTED\", payload: id });\n    if (!content) dispatchRedux(fetchAndSetCard({ id }));\n  };\n\n  return (\n    <div className={classnames(\"col-lg-4 col-md-6 col-12 animated fadeIn\")}>\n      <div className={`card mb-3 ${bgColor}`} onClick={onClickHandler}>\n        <div className=\"card-header d-flex justify-content-center\">{id}</div>\n        <div className=\"card-body d-flex justify-content-center align-items-center\">\n          {!content && (\n            <div\n              className=\"pt-3\"\n              style={{ maxWidth: \"60px\", minHeight: \"100px\" }}\n            >\n              <Spinner.current color={\"#fff\"} />\n            </div>\n          )}\n          {content && <img className={\"animated fadeIn\"} src={content} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","export const fetchAndSetCard = ({ id }) => async (dispatch) => {\n  const searchTerm = \"art\";\n  const fetchUrl = `https://api.giphy.com/v1/gifs/search?q=${searchTerm}&limit=50&api_key=9XVJXMWpaIfCbPWQYsrSiTWl5jUWi0op`;\n\n  const response = await fetch(fetchUrl);\n  const incomingData = await response.json();\n  const { data } = incomingData;\n\n  const randomIndex = Math.floor(Math.random() * data.length);\n  const result = data[randomIndex];\n\n  dispatch({\n    type: \"CARD_CONTENT_SELECTED\",\n    payload: { id, url: result.images.fixed_width.url },\n  });\n};\n","import React from \"react\"\nimport { useSelector } from \"react-redux\"\nimport { colors } from \"../App\"\n\nfunction Interactions({ bgColor = \"\" }) {\n  const { numInteractions } = useSelector(appState => appState.interactions)\n  const percentage = parseInt((numInteractions / colors.length) * 100)\n  return (\n    <>\n      <div className='progress' style={{ height: \"20px\" }}>\n        <div\n          className={`progress-bar ${bgColor}`}\n          role='progressbar'\n          style={{ width: `${percentage}%` }}\n          aria-valuenow={percentage}\n          aria-valuemin='0'\n          aria-valuemax='100'\n        ></div>\n      </div>\n    </>\n  )\n}\n\nexport default Interactions\n","import React from \"react\"\nimport Card from \"../Card\"\nimport Interactions from \"../Interactions\"\n\nexport const colors = [\n  \"bg-primary text-white\",\n  \"bg-primary text-white\",\n  \"bg-secondary\",\n  \"bg-success\",\n  \"bg-danger text-white\",\n  \"bg-info text-white\",\n  \"bg-success\",\n  \"bg-dark\",\n  \"bg-dark\"\n]\n\nconst randomIndex = Math.floor(Math.random() * colors.length);\nconst randomColor = colors[randomIndex];\n\nfunction App() {\n  return (\n    <>\n      <div className={`navbar navbar-expand-lg navbar-light`}>\n        <div className='ml-1 row w-100'>\n          <div className='col-12'>\n            <Interactions bgColor={randomColor} />\n          </div>\n        </div>\n      </div>\n\n      <div className='container'>\n        <div className='row w-100 align-middle'>\n          {colors.map((color, index) => (\n            <Card key={`${index + color}`} bgColor={randomColor} />\n          ))}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default App\n","const initialState = {\n  selectedId: null,\n  contentById: {}\n}\n\nexport default (prevState = initialState, { type, payload }) => {\n  switch (type) {\n    case \"CARD_SELECTED\":\n      return { ...prevState, selectedId: payload }\n    case \"CARD_CONTENT_SELECTED\":\n      return { ...prevState, contentById: { ...prevState.contentById, [payload.id]: payload.url } }\n    default:\n      return { ...prevState }\n  }\n}\n","const initialState = {\n  numInteractions: 0,\n  lastIdsSelected: []\n}\n\nexport default (prevState = initialState, { type, payload }) => {\n  let { lastIdsSelected, numInteractions } = prevState\n  switch (type) {\n    case \"CARD_CONTENT_SELECTED\":\n      return { ...prevState, numInteractions: numInteractions + 1 }\n    case \"CARD_SELECTED\":\n      if (payload !== null) lastIdsSelected.unshift(payload)\n      if (lastIdsSelected.length > 6) lastIdsSelected.pop()\n      return { ...prevState, lastIdsSelected }\n    default:\n      return { ...prevState }\n  }\n}\n","import { combineReducers } from \"redux\"\nimport card from \"./components/Card/reduxReducer\"\nimport interactions from \"./components/Interactions/reduxReducer\"\n\nconst appReducers = combineReducers({\n  card,\n  interactions\n})\n\n// const rootReducer = (state, action) => {\n//   console.log(JSON.stringify(state, null, 4))\n//   return appReducers(state, action)\n// }\n\nexport default appReducers\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { createStore, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport { Provider } from \"react-redux\"\nimport App from \"./components/App\"\nimport \"./index.css\"\n\nimport rootReducer from \"./rootReducer\"\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}